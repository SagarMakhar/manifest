parameters:
  # phone depend parameters
  demands: []
  phoneconfigstring: ''
  phonename: ''
  removefolders: ''
  # build depend parameters
  branchname_default_vcpi_bmw_vcpi_device: ''
  branchname_vcpi_bmw_vcpi_device: ''
  buildidentifier: ''
  cibuildsh: ''
  cleanbuild: False
  deploymentfolder: ''
  localmanifest: ''
  manifestbranchname: 'main'
  officialbuild: False
  otaimage: False
  pool: ''
  resetbuildtree: False
  source_repo: ''
  tokenazure: ''
  tokengithub: ''
  tokenl4b: ''

jobs:
  - job: phone_build_${{parameters.phonename}}
    pool:
      name: ${{parameters.pool}}
      demands: ${{parameters.demands}}
    displayName: Phone Build Pipeline ${{parameters.phonename}}
    variables:
      - name: sorcesokay
        value: 'no'
    timeoutInMinutes: 600
    cancelTimeoutInMinutes: 600

    steps:
      - bash: |
          echo "# phone depend parameters:"
          echo "phoneconfigstring: ................. ${{parameters.phoneconfigstring}}"
          echo "phonename: ......................... ${{parameters.phonename}}"
          echo "removefolders: ..................... ${{parameters.removefolders}}"
          echo "# build depend parameters:"
          echo "branchname_vcpi_bmw_vcpi_device: ... ${{parameters.branchname_vcpi_bmw_vcpi_device}} â‰Ÿ ${{parameters.branchname_default_vcpi_bmw_vcpi_device}}"
          echo "buildidentifier .................... ${{parameters.buildidentifier}}"
          echo "cibuildsh: ......................... ${{parameters.cibuildsh}}"
          echo "cleanbuild: ........................ ${{parameters.cleanbuild}}"
          echo "deploymentfolder: .................. ${{parameters.deploymentfolder}}"
          echo "localmanifest: ..................... ${{parameters.localmanifest}}"
          echo "manifestbranchname: ................ ${{parameters.manifestbranchname}}"
          echo "officialbuild: ..................... ${{parameters.officialbuild}}"
          echo "otaimage: .... ..................... ${{parameters.otaimage}}"
          echo "pool: .............................. ${{parameters.pool}}"
          echo "resetbuildtree: .................... ${{parameters.resetbuildtree}}"
          echo "source_repo: ....................... ${{parameters.source_repo}}"
          echo "tokenazure: ........................ ${{parameters.tokenazure}}"
          echo "tokengithub: ....................... ${{parameters.tokengithub}}"
          echo "tokenl4b: .......................... ${{parameters.tokenl4b}}"
        displayName: Show all variables

      - checkout: self
        enabled: true
        # This needs to be in line with source_repo environment variable
        path: ../repos/VCPI.android.manifest/

      - ${{ if eq( parameters.resetbuildtree , True) }}:
        - bash: ${{parameters.cibuildsh}} ${{parameters.phoneconfigstring}} --delete ${PIPELINE_WORKSPACE}/android/${{parameters.phonename}} || true
          workingDirectory: $(Pipeline.Workspace)
          displayName: Delete whole source foldertree for ${{parameters.phonename}}

      - bash: ${{parameters.cibuildsh}} ${{parameters.phoneconfigstring}}  --create android/${{parameters.phonename}}
        workingDirectory: $(Pipeline.Workspace)
        displayName: Create source folder for ${{parameters.phonename}}

      - bash: ${{parameters.cibuildsh}} ${{parameters.phoneconfigstring}}  --build-config android/${{parameters.phonename}}/buildconfig.env --build-config-add 'export PRECOMMAND="prun"'
        workingDirectory: $(Pipeline.Workspace)
        displayName: Generate a buildconfig.env

      # A small test to check that all folders are in place.
      # TODO: Make the test a little more comprehensive. The Option
      #       `--check-folder-exists` can be used more than once.
      - bash: |
          # I consider a living build folder as a hint for a full source tree!
          if ${{parameters.cibuildsh}} ${{parameters.phoneconfigstring}}  --check-folder-exists "${PIPELINE_WORKSPACE}/android/${{parameters.phonename}}/aosp/build"; then
            echo "I assume the sources are fully installed"
            echo "##vso[task.setvariable variable=sorcesokay]yes"
          else
            echo "I assume the sources are NOT fully installed"
          fi
        workingDirectory: $(Pipeline.Workspace)
        displayName: Check sourcen are fully available

      - checkout: Repo.buildsupport
        displayName: Prepare rampup initial sources
        fetchTags: false
        path: android/VCPI.android.build.buildsupport
        condition: and(succeeded(), eq(variables['sorcesokay'], 'no'))

      - bash: ${{parameters.cibuildsh}} ${{parameters.phoneconfigstring}}  --buildtree-buildsupport VCPI.android.build.buildsupport --buildtree-prepare-base ${{parameters.phonename}} --buildtree-perform-checkout -p ${{parameters.phonename}}
        condition: and(succeeded(), eq(variables['sorcesokay'], 'no'))
        workingDirectory: $(Pipeline.Workspace)/android
        displayName: Sourcen not fully available rampup new sources tree
        env:
          DOCKER_AUTH0: ${{parameters.tokengithub}}
          DOCKER_AUTH1: ${{parameters.tokenl4b}}
          DOCKER_AUTH2: ${{parameters.tokenazure}}
          BUILDCONFIGURATIONFILE: $(Pipeline.Workspace)/android/${{parameters.phonename}}/buildconfig.env

      - bash: |
          if [ "${{parameters.branchname_vcpi_bmw_vcpi_device}}" != "${{parameters.branchname_default_vcpi_bmw_vcpi_device}}" ]; then
            ${{parameters.cibuildsh}} ${{parameters.phoneconfigstring}} --lm-file ${{parameters.localmanifest}} \
              --lm-add-entry '<remote name="softingorigin" fetch="https://dev.azure.com/SoftingAutomotiveElectronics/Automotive/_git/"/>' \
              --lm-add-entry '<extend-project name="VCPI.BMW.VCPI-device" remote="softingorigin" revision="${{parameters.branchname_vcpi_bmw_vcpi_device}}"/>'
            echo ":: installed a local_manifest. Content:"
            cat ${{parameters.localmanifest}}
          else
            [ -e "${{parameters.localmanifest}}" ] && rm "${{parameters.localmanifest}}"
            echo ":: use no manifest for building"
          fi
        workingDirectory: $(Pipeline.Workspace)/android/${{parameters.phonename}}/aosp
        displayName: Configure local manifest

      # Normaly this should not neeedd, but for development purposes I inserted
      # this step. It doesn't take to much time to run.
      - bash:  ./softing-build.sh ${{parameters.phoneconfigstring}} --stop-after-generate
        workingDirectory: $(Pipeline.Workspace)/android/${{parameters.phonename}}/aosp
        displayName: Generate Android docker image I

      - bash: ${{parameters.cibuildsh}} ${{parameters.phoneconfigstring}} --check-filesystem
        workingDirectory: $(Pipeline.Workspace)/android/${{parameters.phonename}}/aosp
        displayName: Check for filesystem problems

      - bash: |
          ./softing-build.sh ${{parameters.phoneconfigstring}} -c 'git -C .repo/manifests remote update --prune'
          ./softing-build.sh ${{parameters.phoneconfigstring}} -c 'repo init -b ${{parameters.manifestbranchname}} -m ${{parameters.phonename}}-devel.xml'
          git -C .repo/manifests show --no-patch
        workingDirectory: $(Pipeline.Workspace)/android/${{parameters.phonename}}/aosp
        displayName: Checkout manifest ${{parameters.manifestbranchname}}
        env:
          DOCKER_AUTH0: ${{parameters.tokengithub}}
          DOCKER_AUTH1: ${{parameters.tokenl4b}}
          DOCKER_AUTH2: ${{parameters.tokenazure}}

      - bash: |
          ${{parameters.cibuildsh}} ${{parameters.phoneconfigstring}} \
            --update-component "build/buildsupport" \
            --update-component "packages/apps/VCPI.BMW.VCPI-device"
        workingDirectory: $(Pipeline.Workspace)/android/${{parameters.phonename}}/aosp
        displayName: Update buildsupport, VCPI.BMW.VCPI-device to latest version
        env:
          DOCKER_AUTH0: ${{parameters.tokengithub}}
          DOCKER_AUTH1: ${{parameters.tokenl4b}}
          DOCKER_AUTH2: ${{parameters.tokenazure}}
          BUILDCONFIGURATIONFILE: $(Pipeline.Workspace)/android/${{parameters.phonename}}/buildconfig.env

      - bash:  ./softing-build.sh ${{parameters.phoneconfigstring}} --stop-after-generate
        workingDirectory: $(Pipeline.Workspace)/android/${{parameters.phonename}}/aosp
        displayName: Generate Android docker image II

      - bash: |
          ./softing-build.sh ${{parameters.phoneconfigstring}} -d sources
        workingDirectory: $(Pipeline.Workspace)/android/${{parameters.phonename}}/aosp
        displayName: clean sources

      - bash: |
          if [ "${{parameters.branchname_vcpi_bmw_vcpi_device}}" == "$(vcpi_bmw_device_default_branchname)" ]; then
            if [ -e "${{parameters.localmanifest}}" ]; then
              echo ":: removing ${{parameters.localmanifest}}"
              rm "${{parameters.localmanifest}}"
            fi
          fi
          offstr=""
          if [ "${{parameters.officialbuild}}" == "True" ]; then
            offstr="--official=true"
          fi
          ${{parameters.cibuildsh}} ${{parameters.phoneconfigstring}} --update ${offstr}
        workingDirectory: $(Pipeline.Workspace)/android/${{parameters.phonename}}/aosp
        displayName: Update sources
        env:
          DOCKER_AUTH0: ${{parameters.tokengithub}}
          DOCKER_AUTH1: ${{parameters.tokenl4b}}
          DOCKER_AUTH2: ${{parameters.tokenazure}}
          BUILDCONFIGURATIONFILE: $(Pipeline.Workspace)/android/${{parameters.phonename}}/buildconfig.env

      - bash:  ./softing-build.sh ${{parameters.phoneconfigstring}} --stop-after-generate
        workingDirectory: $(Pipeline.Workspace)/android/${{parameters.phonename}}/aosp
        displayName: Generate Android docker image III

      - bash: |
          if [ -e changes-since-last-repo-sync.txt ]; then
            cat changes-since-last-repo-sync.txt
            rm changes-since-last-repo-sync.txt
          else
            true
          fi
        displayName: Changes since the last update
        workingDirectory: $(Pipeline.Workspace)/android/${{parameters.phonename}}/aosp

      - bash: |
          [ -e "${{parameters.localmanifest}}" ] && {
            echo ":: building with ${{parameters.localmanifest}}!"
            cat "${{parameters.localmanifest}}"
          }

          offstr=""
          if [ "${{parameters.officialbuild}}" == "True" ]; then
            offstr="--official=true"
          fi
          ${{parameters.cibuildsh}} ${{parameters.phoneconfigstring}} \
            --build-clean-out "${{parameters.cleanbuild}}" \
            --build \
            --build-identifier="${{parameters.buildidentifier}}" \
            --username=$(Build.RequestedFor) \
            --usermail=$(Build.RequestedForEmail) \
            ${offstr}
        displayName: Build image
        workingDirectory: $(Pipeline.Workspace)/android/${{parameters.phonename}}/aosp
        env:
          DOCKER_AUTH0: ${{parameters.tokengithub}}
          DOCKER_AUTH1: ${{parameters.tokenl4b}}
          DOCKER_AUTH2: ${{parameters.tokenazure}}
          BUILDCONFIGURATIONFILE: $(Pipeline.Workspace)/android/${{parameters.phonename}}/buildconfig.env

      - bash: |
          if [ ! -e .version.source.env ]; then
            echo ":: I miss '.version.source.env' file."
            echo "   no image otaimage build possible ..."

            # Stopping here, because somthing is wrong in the former step.
            exit 1
          fi

          source .version.source.env
          rm .version.source.env

          if [[ "${{parameters.otaimage}}" != "True" ]]; then
            echo ":: ota image creation not needed"
            exit 0
          fi

          ${{parameters.cibuildsh}} ${{parameters.phoneconfigstring}} \
            --build \
            --username=$(Build.RequestedFor) \
            --usermail=$(Build.RequestedForEmail) \
            --otatest-image=${TAG}

        displayName: Build OTA Tesimage
        workingDirectory: $(Pipeline.Workspace)/android/${{parameters.phonename}}/aosp
        env:
          DOCKER_AUTH0: ${{parameters.tokengithub}}
          DOCKER_AUTH1: ${{parameters.tokenl4b}}
          DOCKER_AUTH2: ${{parameters.tokenazure}}
          BUILDCONFIGURATIONFILE: $(Pipeline.Workspace)/android/${{parameters.phonename}}/buildconfig.env

      - bash: |
          if [ -f ${{parameters.deploymentfolder}}/_check-for-ci.md ]; then
            # We can store the outcome to the ci folder
            echo ":: Moving official builds"
            find . -maxdepth 1 -mindepth 1 -iname 'vcpi--release-*' -not -name '*.dist' -exec mv -v {} ${{parameters.deploymentfolder}}/ \;
            echo ":: Moving inofficial builds"
            find . -maxdepth 1 -mindepth 1 -iname 'internal--vcpi-release-*' -not -name '*.dist' -exec mv -v {} ${{parameters.deploymentfolder}}/ \;
            echo ":: removing dist folders"
            find . -maxdepth 1 -mindepth 1 -iname '*.dist' -exec rm -rf {} \;
          else
            echo ":: No move of output folder, ci folder not mounted!"
          fi
        displayName: Move output to ci folder
        workingDirectory: $(Pipeline.Workspace)/android/${{parameters.phonename}}/aosp
