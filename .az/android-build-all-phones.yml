---
trigger: none

schedules:
- cron: '0 1 * * mon-fri'
  displayName: Daily build at midnight (Monday-Friday)
  branches:
    include:
    - main
  always: true

pool:
  name: FirmwareTestpool
  demands:
    - android
    - distrobuilder

variables:
  - group: VCPI-GitHub
  - name: tokengithub
    value: https://$(GITHUB_TOKEN_ALL_REPOSITORIES)@github.com
  - name: tokenl4b
    value: https://$(LINUX4BIZ_USERNAME):$(LINUX4BIZ)@ext-git.l4b-software.com
  - name: tokenazure
    value: https://$(AZUREDEVOPS_READONLY)@dev.azure.com
  - name: deploymentfolder
    value: /media/filer.releases.vcpi/
  - name: localmanifest
    value: .repo/local_manifests/developer.xml
  - name: vcpi_bmw_device_default_branchname
    value: main
  - name: AZP_AGENT_ALLOW_WORK_DIRECTORY_REPOSITORIES
    value: "true"
  - name: source_repo
    value: ${AGENT_WORKFOLDER}/repos/VCPI.android.manifest
  - name: cibuildsh
    value: $(source_repo)/.az/ci-build.sh

parameters:
  - name: phonelynx
    displayName: Build for lynx
    type: boolean
    default: true
  - name: phonepdx223
    displayName: Build for pdx223
    type: boolean
    default: true
  - name: pool
    displayName: Which pool
    type: string
    default: FirmwareTestpool
    values:
      - FirmwareTestpool
      - SzeklersburgPool
  - name: branchname_vcpi_bmw_vcpi_device
    type: string
    displayName: VCPI.BMW.VCPI-device Branch
    default: main
  - name: cleanbuild
    displayName: Clean sources + out folder (Clean build)
    type: boolean
    default: false
  - name: resetbuildtree
    displayName: Restart whole buildprocess with checkout
    type: boolean
    default: false

resources:
  repositories:
    - repository: Repo.buildsupport
      type: github
      endpoint: Githup-SoftingAE-VCPI
      name: SoftingAE-VCPI/VCPI.android.build.buildsupport
      ref: main

jobs:
  - job: phone_build
    pool:
      name: ${{parameters.pool}}
      demands:
        android
    displayName: Phone Build Pipeline
    variables:
      - name: sorcesokay
        value: 'no'
    timeoutInMinutes: 600
    cancelTimeoutInMinutes: 600

    strategy:
      matrix:

        ${{ if eq(parameters.phonelynx, True) }}:
          lynx:
            phonename: 'lynx'
            phoneconfigstring: -p lynx
            removefolders: ${PIPELINE_WORKSPACE}/android/lynx/aosp ${PIPELINE_WORKSPACE}/android/lynx/gki

        ${{ if eq(parameters.phonepdx223, True) }}:
          pdx223:
            phonename: 'pdx223'
            phoneconfigstring: -p pdx223
            removefolders: ${PIPELINE_WORKSPACE}/android/pdx223/aosp

      maxParallel: 2

    steps:
      - checkout: self
        enabled: true
        # This needs to be in line with source_repo environment variable
        path: ../repos/VCPI.android.manifest/

      - ${{ if eq( parameters.resetbuildtree , True) }}:
        - bash: $(cibuildsh) --delete ${PIPELINE_WORKSPACE}/android/$(phonename) || true
          workingDirectory: $(Pipeline.Workspace)
          displayName: Delete whole source foldertree for $(phonename)

      - bash: $(cibuildsh) --create android/$(phonename)
        workingDirectory: $(Pipeline.Workspace)
        displayName: Create source folder for $(phonename)

      - bash: $(cibuildsh) --build-config android/$(phonename)/buildconfig.env --build-config-add 'export PRECOMMAND="prun"'
        workingDirectory: $(Pipeline.Workspace)
        displayName: Generate a buildconfig.env

      # A small test to check that all folders are in place.
      # TODO: Make the test a little more comprehensive. The Option
      #       `--check-folder-exists` can be used more than once.
      - bash: |
          # I consider a living build folder as a hint for a full source tree!
          if $(cibuildsh) --check-folder-exists "${PIPELINE_WORKSPACE}/android/$(phonename)/aosp/build"; then
            echo "I assume the sources are fully installed"
            echo "##vso[task.setvariable variable=sorcesokay]yes"
          else
            echo "I assume the sources are NOT fully installed"
          fi
        workingDirectory: $(Pipeline.Workspace)
        displayName: Check sourcen are fully available

      - checkout: Repo.buildsupport
        displayName: Prepare rampup initial sources
        fetchTags: false
        path: android/VCPI.android.build.buildsupport
        condition: and(succeeded(), eq(variables['sorcesokay'], 'no'))

      - bash: $(cibuildsh) --buildtree-buildsupport VCPI.android.build.buildsupport --buildtree-prepare-base $(phonename) --buildtree-perform-checkout -p $(phonename)
        condition: and(succeeded(), eq(variables['sorcesokay'], 'no'))
        workingDirectory: $(Pipeline.Workspace)/android
        displayName: Sourcen not fully available rampup new sources tree
        env:
          DOCKER_AUTH0: $(tokengithub)
          DOCKER_AUTH1: $(tokenl4b)
          DOCKER_AUTH2: $(tokenazure)
          BUILDCONFIGURATIONFILE: $(Pipeline.Workspace)/android/$(phonename)/buildconfig.env

      - ${{ if ne( parameters.branchname_vcpi_bmw_vcpi_device, variables['vcpi_bmw_device_default_branchname']) }}:
        - bash: |
            $(cibuildsh) --lm-file $(localmanifest) \
              --lm-add-entry '<remote name="softingorigin" fetch="https://dev.azure.com/SoftingAutomotiveElectronics/Automotive/_git/"/>' \
              --lm-add-entry '<extend-project name="VCPI.BMW.VCPI-device" remote="softingorigin" revision="${{parameters.branchname_vcpi_bmw_vcpi_device}}"/>'
            echo ":: installed a local_manifest. Content:"
            cat $(localmanifest)
          workingDirectory: $(Pipeline.Workspace)/android/$(phonename)/aosp
          displayName: Configure ${{parameters.branchname_vcpi_bmw_vcpi_device}} for VCPI.BMW.VCPI-device

      - bash: |
          set -x
          if [ "${{parameters.branchname_vcpi_bmw_vcpi_device}}" == "$(vcpi_bmw_device_default_branchname)" ]; then
            if [ -e "$(localmanifest)" ]; then
              echo ":: removing $(localmanifest)"
              rm "$(localmanifest)"
            fi
          fi
          ./softing-build.sh $(phoneconfigstring) -d sources -u
        workingDirectory: $(Pipeline.Workspace)/android/$(phonename)/aosp
        displayName: Update sources
        env:
          DOCKER_AUTH0: $(tokengithub)
          DOCKER_AUTH1: $(tokenl4b)
          DOCKER_AUTH2: $(tokenazure)
          BUILDCONFIGURATIONFILE: $(Pipeline.Workspace)/android/$(phonename)/buildconfig.env

      - bash: |
          if [ -e changes-since-last-repo-sync.txt ]; then
            cat changes-since-last-repo-sync.txt
            rm changes-since-last-repo-sync.txt
          else
            true
          fi
        displayName: Changes since the last update
        workingDirectory: $(Pipeline.Workspace)/android/$(phonename)/aosp

      - bash: |
          [ -e "$(localmanifest)" ] && {
            echo ":: building with $(localmanifest)!"
            cat "$(localmanifest)"
          }

          $(cibuildsh) --build-clean-sources "True" --build-clean-out "${{parameters.cleanbuild}}" $(phoneconfigstring) --build
        displayName: Build image
        workingDirectory: $(Pipeline.Workspace)/android/$(phonename)/aosp
        env:
          BUILDCONFIGURATIONFILE: $(Pipeline.Workspace)/android/$(phonename)/buildconfig.env

      - bash: |
          if [ -f $(deploymentfolder)/_check-for-ci.md ]; then
            # We can store the outcome to the ci folder
            echo ":: Moving official builds"
            find . -maxdepth 1 -mindepth 1 -iname 'vcpi--release-*' -not -name '*.dist' -exec mv -v {} $(deploymentfolder)/ \;
            echo ":: Moving inofficial builds"
            find . -maxdepth 1 -mindepth 1 -iname 'internal--vcpi-release-*' -not -name '*.dist' -exec mv -v {} $(deploymentfolder)/ \;
            echo ":: removing dist folders"
            find . -maxdepth 1 -mindepth 1 -iname '*.dist' -exec rm -rf {} \;
          else
            echo ":: No move of output folder, ci folder not mounted!"
          fi
        displayName: Move output to ci folder
        workingDirectory: $(Pipeline.Workspace)/android/$(phonename)/aosp
